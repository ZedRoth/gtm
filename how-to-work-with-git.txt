$ Initialization
Command: git rev-parse gitissius
Command: git branch # Список веток для проверки есть ли ветка gitissius локально
Command: git branch -a # Продолжаем искать ветку gitissius удаленно в origin
Command: git name-rev --name-only HEAD # Получаем имя текущей ветки (если нет просто полагаем, что master)
Command: git stash # сташим изменения (копим их в базу git, чтобы потом ревертнуть при помощи stash pop)


# Как-то запутанно создаем новую ветку gitissius
Command: git symbolic-ref HEAD refs/heads/gitissius # Переходим на новую ветку
Command: git rm --cached # Удаляем из кеша все незакоммиченное
Command: git commit --allow-empty -m Initialization # Создаем коммит с новой веткой в репозитории

Command: git checkout master --force # Переходим обратно на изначальную ветку (в текущем примере master)
Command: git stash pop # восстанавливаем накопленные изменения

Command: git rev-parse gitissius
Command: git ls-tree --full-tree -r -t -z e90e78edf11876a7df62645ea37a05cbcba3b43e



НЕОБХОДИМО ИЗМЕНИТЬ
1) Разобраться как добавлять файлы без перехода на ветку если это возможно.
Иначе - просто реализовать все через обычный add и commit с переходом и stash.
(https://git-scm.com/book/en/v2/Git-Internals-Git-Objects)

ДОБАВИТЬ ФАЙЛЫ БЕЗ ПЕРЕХОДА НА ВЕТКУ МОЖНО, ВРОДЕ.
Для этого нужны
* hash-object - to add a blob object into db
* cat-file - to display db item content
* git cat-file -p master^{tree}
* update-index - to include into stage
* read-tree --prefix=subdirectoryname - to read tree into staging area
* commit-tree - to create commit from a tree
* write-tree - to create tree object in db

File modes
100644 - regular file
100755 - executable file
120000 - symbolic link

040000 - tree